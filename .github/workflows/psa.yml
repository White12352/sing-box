name: code

on:
  workflow_dispatch: 

jobs:
  clone_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: code
        run: |
          git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          git clone -b dev-11 https://github.com/White12352/spa spa
          mv -f spa/.github/proxyproto/ sing-box/common/
          cd sing-box
          sed -i '0,/github.com\/oschwald\/maxminddb-golang v[0-9]\+\.[0-9]\+\.[0-9]\+/s//&\n\tgithub.com\/pires\/go-proxyproto v0.7.0/' go.mod
          sed -i '0,/N "github.com\/sagernet\/sing\/common\/network"/s//&\n\n\t"github.com\/pires\/go-proxyproto"/' outbound/direct.go
          sed -i '0,/overrideDestination M.Socksaddr/s//&\n\tproxyProto          uint8/' outbound/direct.go
          sed -i '0,/dialer:         outboundDialer,/s//&\n\t\tproxyProto:     options.ProxyProtocol,/' outbound/direct.go
          sed -i 's/if options.ProxyProtocol != 0 {/if options.ProxyProtocol > 2 {/1' outbound/direct.go
          sed -i 's/return nil, E.New("Proxy Protocol is deprecated and removed in sing-box 1.6.0")/return nil, E.New("invalid proxy protocol option: ", options.ProxyProtocol)/1' outbound/direct.go
          #sed -i '0,/ctx, metadata := adapter.AppendContext(ctx)/s//&\n\toriginDestination := metadata.Destination/1' outbound/direct.go
          sed -i $'s#return h.dialer.DialContext(ctx, network, destination)#conn, err := h.dialer.DialContext(ctx, network, destination)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          #sed -i 's/ctx, metadata := adapter.AppendContext(ctx)/ctx, metadata := adapter.AppendContext(ctx)\n\toriginDestination := metadata.Destination/2' outbound/direct.go
          awk '/ctx, metadata := adapter\.AppendContext\(ctx\)/ && count < 2 { sub(/ctx, metadata := adapter\.AppendContext\(ctx\)/, "&\n\toriginDestination := metadata.Destination"); count++; } 1' outbound/direct.go > temp_file && mv -f temp_file outbound/direct.go
          sed -i $'s#return N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)#conn, err := N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          sed -i '0,/"github.com\/sagernet\/sing-box\/adapter"/s//&\n\t"github.com\/sagernet\/sing-box\/common\/proxyproto"/' inbound/default_tcp.go
          awk '{if (/return nil, E.New\("Proxy Protocol is deprecated and removed in sing-box 1.6.0"\)/ && !replaced) {print "\t\ta.logger.Debug(\"proxy protocol enabled\")\n\t\ttcpListener = &proxyproto.Listener{Listener: tcpListener, AcceptNoHeader: a.listenOptions.ProxyProtocolAcceptNoHeader}"; replaced = 1;} else {print}}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          awk '{if (/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/ && !replaced) {sub(/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/, "if a.listenOptions.ProxyProtocol {", $0); replaced = 1;} print}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          sed -i '/github.com\/pierrec\/lz4\/v[0-999]\+ v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\/ indirect/ a\\tgithub.com/pires/go-proxyproto v0.7.0 // indirect' test/go.mod
          sed -i '0,/berty.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+/s//&\n\tgithub.com\/Dreamacro\/clash v1.17.0/' go.mod
          awk '/github.com\/ajg\/form v[0-9]+\.[0-9]+\.[0-9]+ \/\/ indirect/ && !inserted {print "\tgithub.com/Dreamacro/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect"; inserted=1} 1' go.mod > temp && mv -f temp go.mod
          sed -i -e '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/ { N; s/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"\n/ }' test/clash_test.go
          #sed -i '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/a \	\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"' test/clash_test.go
          awk '/ImageShadowTLS,/ {print; print "\tImageShadowsocksR,"; next} 1' test/clash_test.go > temp && mv -f temp test/clash_test.go
          sed -i '/berty\.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\//a \\tgithub.com\/Dreamacro\/clash v1.17.0 // indirect\n\tgithub.com\/Dreamacro\/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect' test/go.mod
          awk '/ProtocolSTUN = "stun"/ {print; print "\tProtocolBittorrent = \"bittorrent\""; inserted=1; next} 1; END {if (!inserted) print "\tProtocolBittorrent = \"bittorrent\""}' constant/protocol.go > temp_file && mv -f temp_file constant/protocol.go
          awk '{ if (/sniffMetadata, err := sniff.PeekStream\(ctx, conn, buffer, time\.Duration\(metadata\.InboundOptions\.SniffTimeout\), sniff\.StreamDomainNameQuery, sniff\.TLSClientHello, sniff\.HTTPHost\)/) sub("sniff\\.HTTPHost", "sniff.HTTPHost, sniff.BittorrentTCPMessage") } { print }' route/router.go > temp && mv -f temp route/router.go
          sed -i 's/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage)/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage, sniff.BittorrentUDPMessage)/' route/router.go
          awk '{if(index($0, "//replace github.com/sagernet/sing") > 0) $0 = "replace github.com/sagernet/sing => https://github.com/White12352/sing v0.2.20"}1' go.mod > temp_file && mv -f temp_file go.mod
          awk '/^replace/ && !found {print "replace github.com/sagernet/sing => https://github.com/White12352/sing v0.2.20"; found=1} 1' test/go.mod > go.mod.tmp && mv -f go.mod.tmp test/go.mod
          cd ..
          rm -f sing-box/outbound/shadowsocksr.go
          rm -f sing-box/outbound/shadowsocksr_stub.go
          mv -f spa/.github/outbound/* sing-box/outbound/
          mv -f spa/.github/test/* sing-box/test/
          mv -f spa/.github/transport/* sing-box/transport/
          mv -f spa/.github/common/sniff/* sing-box/common/sniff/
      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true
      
      - name: Commit and Push Changes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"
          git checkout -b sing-box-b
          rm -rf .github
          rm -rf spa
          cp -r sing-box/* .
          cp -r sing-box/.github .
          rm -rf sing-box
          cd ..
          git clone -b dev https://github.com/SagerNet/sing-quic sing-quic
          cd sing-box/test
          go mod tidy
          cd ..
          go mod tidy
          git add .
          git commit -m "commit"
          git push --force origin sing-box-b
